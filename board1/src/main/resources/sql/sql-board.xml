<?xml version="1.0" encoding="UTF-8" ?>
<!-- 위의 내용은 아래의 내용이 xml 문법으로 되어 있다는 의미 -->

<!-- mybatis sql 쿼리 mapping 파일임을 나타내는 구문 -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mybatis : 기존 JDBC 프로그래밍은 java 소스코드와 데이터베이스의 SQL 쿼리문을 함께 사용하는 방식임 -->
<!-- java 소스 코드를 수정 시 SQL 쿼리문의 수정이 발생할 수 있으며, SQL 쿼리 수정 시 java 소스 코드의 수정이 필요한 문제가 발생하여 데이터베이스와 자바 프로그래밍의 협업 및 유지보수의 어려움이 발생함 -->
<!-- mybatis는 JDBC 자바 소스코드와 데이터베이스 SQL문을 서로 분리하여 사용하도록 만들어주는 프레임워크 -->
<!-- 이러한 형태의 데이터베이스 프레임워크를 ORM(Object Relational Mapping) 이라고 함 -->

<!-- 실제 SQL 문을 입력하는 구문 -->
<!-- 해당 xml 파일과 java interface 파일을 연동하여 사용함 -->
<!-- <select>, <insert>, <update>, <delete> 태그를 사용하여 실제 sql 문을 입력 -->

<!-- <mapper> : @Mapper 어노테이션으로 설정되어 있는 인터페이스 파일과 연동되는 파일음을 스프링 프레임워크에 알려줌 -->
<!-- namespace : 해당 어플리케이션의 자바 클래스명을 입력하여 연동함, 기본 JAVA API에 속한 클래스가 아니기 때문에 전체 패키지명을 입력해야 함 -->

<mapper namespace="bitc.fullstack405.board1.mapper.BoardMapper">

<!--    <select>, <insert>, <update>, <delete> 태그를 사용하여 매칭된 인터페이스의 메소드와 연동함 -->
<!--    id : 매칭된 인터페이스의 멤버 메소드명과 id 속성명이 동일해야 함, xml 문법은 오버로딩이 되지 않기 때문에 동일한 메소드명을 여러개 사용할 수 없음 -->
<!--    resultType : 해당 태그가 실행된 후 반환될 데이터 타입 설정, 패키지명 전체 입력 -->
<!--    parameterType : 해당 태그를 실행 시 필요한 매개변수의 타입의 설정, 패키지명 전체 입력 -->
    <select id="selectBoardList" resultType="bitc.fullstack405.board1.dto.BoardDTO">
        SELECT
            board_idx, title, create_user,
            DATE_FORMAT(create_date, '%Y.%m.%d %H:%i:%s') AS create_date, hit_cnt
        FROM
            t_board
        WHERE
            deleted_yn = 'N'
        ORDER BY
            board_idx DESC
    </select>

<!--    글 쓰기 -->
<!--    parameterType 타입으로 DTO 클래스 타입의 객체를 가져와서 사용할 경우 #{필드명} 형태로 사용 -->
<!--    mybatis 사용 시 useGeneratedKeys 옵션을 사용하여 자동 증가 옵션을 사용할 수 있음 -->
<!--    keyProperty : useGeneratedKeys 옵션을 사용하여 자동 증가되는 번호를 지정한 컬럼값으로 반환받을 수 있음, 반환받을 컬럼명은 DTO 클래스의 필드명으로 설정함 -->
    <insert id="insertBoard" parameterType="bitc.fullstack405.board1.dto.BoardDTO" useGeneratedKeys="true" keyProperty="boardIdx">
        INSERT INTO
            t_board (title, contents, create_user, create_date)
        VALUES
            (#{title}, #{contents}, #{createUser}, now())
    </insert>

<!--    글 상세보기 -->
    <select id="selectBoardDetail" parameterType="int" resultType="bitc.fullstack405.board1.dto.BoardDTO">
        SELECT
            board_idx, title, contents, create_user, update_user, hit_cnt,
            DATE_FORMAT(create_date, '%Y.%m.%d %H:%i:%s') AS create_date,
            DATE_FORMAT(update_date, '%Y.%m.%d %H:%i:%s') AS update_date
        FROM
            t_board
        WHERE
            board_idx = #{boardIdx}
        AND
            deleted_yn = 'N'
    </select>

<!--    글 수정 -->
    <update id="updateBoard" parameterType="bitc.fullstack405.board1.dto.BoardDTO">
        UPDATE
            t_board
        SET
            title = #{title}, contents = #{contents}, update_user = #{updateUser}, update_date = now()
        WHERE
            board_idx = #{boardIdx}
    </update>

<!--    글 삭제 -->
    <update id="deleteBoard" parameterType="int">
        UPDATE
            t_board
        SET
            deleted_yn = 'Y'
        WHERE
            board_idx = #{boardIdx};
    </update>

<!--    조회수 업데이트 -->
    <update id="updateHitCount" parameterType="int">
        UPDATE
            t_board
        SET
            hit_cnt = hit_cnt + 1
        WHERE
            board_idx = #{boardIdx}
    </update>

<!--    첨부파일 추가 -->
<!--    <foreach> : mybatis의 반복문, 해당 태그 아래 부분을 반복 실행함, java의 향상된 for문과 같음 -->
<!--    collection : <foreach> 실행 시 반복 수행할 대상의 데이터 타입을 설정, array/list -->
<!--    item : <foreach> 실행 시 배열 혹은 List에서 꺼내온 데이터의 이름을 설정 -->
<!--    separator : 데이터를 구분하는 기호 설정, 주로 ' , ' 를 사용함 -->
    <insert id="insertBoardFileList" parameterType="bitc.fullstack405.board1.dto.BoardFileDTO">
        INSERT INTO
            t_files
            (board_idx, original_file_name, stored_file_name, file_size, create_user, create_date)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.boardIdx}, #{item.originalFileName}, #{item.storedFileName}, #{item.fileSize},  #{item.createUser}, now())
        </foreach>
    </insert>
</mapper>












