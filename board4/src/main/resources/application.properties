spring.application.name=board4

server.port=8080

spring.mvc.hiddenmethod.filter.enabled=true

spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/testdb1?characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.hikari.username=test1
spring.datasource.hikari.password=full405
spring.datasource.hikari.connection-test-query=SELECT 1


# 기존 데이터베이스 접속 정보
# JPA를 사용하기 때문에 mybatis 설정 정보를 제거
#mybatis.configuration.map-underscore-to-camel-case=true

# JPA는 스프링 프레임워크에서 사용하는 ORM
# JPA는 각 기능의 동작이 어떻게 되어야 한다는 것을 정의한 기술 명세이며, 이 기술 명세에 따라서 구현된 프로그램이 JPA Provider 라고 함
# 현재 가장 유명한 JPA 프로바이더는 하이버네이트임

# JPA 설정
# JPA에서 사용할 DB의 종류를 설정
# DB2, DERBY, H2, HANA, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE 를 사용할 수 있음
spring.jpa.database=mysql

# 데이터베이스엔진 설정
# MySQL 의 엔진을 설정
# 현재 거의 모든 MySQL은 InnoDB 를 사용함
# JPA에서 엔진 종류를 선택하지 않을 경우 'MyISAM' 을 기본으로 사용함 (MySQL5 버전 사용 시)
# MySQL5Dialect, MySQL5InnoDBDialect, MySQL57Dialect, MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# mysql 엔진 종류 설정 다른 방법
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine=innodb

# JPA를 사용하여 엔티티 연관관계를 바탕으로 자동 실행
# 실제 개발환경에서 false로 설정
spring.jpa.generate-ddl=true

# 위의 generate-ddl 옵션과 함께 사용하여 프로그램 시작 시 데이터베이스 생성 방식 결정
# 실제 운영 환경에서는 create, create-drop, update 는 절대 사용하면 안됨 (기존 데이터 삭제 됨)
# create : 시작 시 데이터베이스 생성, 기존 테이블 삭제 후 생성 (개발 초기 단계에서 사용)
# create-drop : 시작 시 데이터베이스 생성, 종료 시 데이터베이스 삭제 (개발 초기 단계에서 사용)
# validate : 엔티티와 테이블이 정상적으로 매핑되었는지 확인 (실제 운영 환경에서 사용, 테스트 서버에서 사용)
# update : 데이터베이스의 변경 사항이 있을 경우 수정 (테스트 서버에서 사용, 개발 중간 단계에서 사용)
# none : 아무런 작업하지 않음 (실제 운영 환경에서 사용)
spring.jpa.hibernate.ddl-auto=create

# 스프링 프레임워크의 resources 폴더 아래에 schema.sql, data.sql 이 있을 경우 해당 파일 안에 있는 sql 쿼리문을 실행함
# schema.sql 은 ddl 명령을 입력, data.sql 은 dml 명령을 입력함
# ALWAYS : mysql, oracle과 같은 외부 DB 사용 시 사용
# EMBEDDED : 스프링 내장 DB인 H2, HSQL, DERBY 사용 시 사용
# NEVER : sql 초기화 안함

# spring boot 2.4.x 버전까지는 아래의 옵션을 사용
# spring.datasource.initialization-mode=always
# spring boot 2.5.x 버전 이후부터는 아래의 옵션을 사용
spring.sql.init.mode=always

# resources 폴더 아래에 schema.sql, data.sql 이 존재하고, 설정에 'spring.jpa.hibernate.ddl-auto' 설정이 동시에 존재할 경우 sql 파일을 먼저 실행하고, JPA에 의한 데이터베이스 생성이 나중에 실행됨
# JPA 실행 후 sql 파일 실행을 원할 경우 아래의 옵션을 실행
# sql 파일을 통해서만 데이터베이스 생성을 원할 경우 'spring.jpa.hibernate.ddl-auto=none' 으로 설정 
spring.jpa.defer-datasource-initialization=true

# JPA 에서 실행되는 SQL 쿼리문을 출력
spring.jpa.show-sql=true

# JPA 에서 실행되는 SQL 쿼리문을 보기 좋게 포맷팅함
spring.jpa.properties.hibernate.format_sql=true

# JPA를 사용하여 데이터 추가 시 새로운 ID를 생성하는 옵션
# MySQL에서는 ai 옵션을 사용하므로 false
# Spring 6 (spring boot 3) 부터는 사용되지 않는 옵션
#spring.jpa.hibernate.use-new-id-generator-mappings=false






